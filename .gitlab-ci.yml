image: smartmeio/arancino-library-build


stages:
    - start
    - package
    - upload
    - index
    - cleanup

#################################
#######       START       #######
#################################

####### START
start:
    stage: start

    variables:
        GIT_STRATEGY: none

    script:
        - mkdir -p tmp
        - echo `date +%Y-%m-%d` > tmp/date.txt
        - echo `date +%H-%M-%S` > tmp/time.txt

    artifacts:
        paths:
            - tmp/

        expire_in: 1d

    only:
        - tags

    except:
        - master
        - branches

######## PUSH
#push:
#  stage: start
#  only: ['tags']
#  except: ['master', 'branches']

#  allow_failure: true

#  variables:
#    GIT_STRATEGY: clone

#  before_script:
#    - eval `python3 check-version-tag.py ${CI_COMMIT_TAG}`

#  script:
#    #- apk add git
#    - git remote add github https://$GITHUB_BOT_USERNAME:$GITHUB_ACCESS_TOKEN@github.com/$GITHUB_DEST_REPO
#    #- git remote show github
#    #- git remote show origin
#    #- git branch -a
#    - git checkout $CI_COMMIT_TAG
#    - git fetch github
#    #- git push github $CI_COMMIT_REF_NAME --force
#    - >
#      if [[ ${PRE_RELEASE} == "test"  ]]; then
#        echo "not performing TAG push";
#      else
#        git push github ${CI_COMMIT_TAG}
#      fi
#    - git push github --all --force

#################################
#######      PACKAGE      #######
#################################

#######    Package Release    #######
package_release:
    stage: package

    script:
        # create some variables into temp folder
        - PKG_NAME=$PLATFORM_NAME-$CI_COMMIT_TAG
        - PKG_NAME_PIO=framework-arduino-samd-arancino-$CI_COMMIT_TAG

        - echo $PKG_NAME > tmp/pkg_name.txt
        - echo $PKG_NAME_PIO > tmp/pkg_name_pio.txt
        - echo $CI_COMMIT_TAG > tmp/target_path.txt

        - sed -i "s:\(ARANCINO_CORE_VERSION\) .*:\1 \"$CI_COMMIT_TAG\":" ./cores/arancino/Arduino.h
        - sed -i "s:\(version\)=.*:\1=$CI_COMMIT_TAG:" ./platform.txt
        - jq --arg tag_ver ${CI_COMMIT_TAG} '.version = $tag_ver' package.json|sponge package.json

        # adding Arduino-FreeRTOS-SAMD21 into core
        - git clone $REPO_LIB_FREERTOS_URL -b v2.3.0-smartmeio.1 libraries/FreeRTOS-SAMD21
        
        # adding ArduinoJson into core
        - git clone $REPO_LIB_ARDUINOJSON_URL -b v6.18.0 libraries/ArduinoJson

        # adding MsgPack into core
        - git clone $REPO_LIB_MSGPACK_URL -b 0.3.8 libraries/MsgPack

        # adding MsgPacketizer into core
        - git clone $REPO_LIB_MSGPACKETIZER_URL -b 0.3.0 libraries/MsgPacketizer

        # adding Microcontroller ID into core
        - git clone $REPO_LIB_MICROCONTROLLER_ID_URL -b 1.0.0 libraries/Microcontroller-id

        # adding PubSubClient into core
        - git clone $REPO_LIB_PUBSUBCLIENT_URL -b v2.8 libraries/PubSubClient

        - cd ..
        # tar files and move temp folder back
        - tar --exclude=tmp --exclude=.git* --exclude=*.DS_Store* -cvjf $PKG_NAME.tar.bz2 $CI_PROJECT_NAME

        # pio packaging
        - cp -r $CI_PROJECT_NAME framework-arduino-samd-arancino
        - tar --exclude=tmp --exclude=.git* --exclude=*.DS_Store* -cvjf $PKG_NAME_PIO.tar.bz2 framework-arduino-samd-arancino

        # move tar into temp folder
        - cd $CI_PROJECT_NAME
        - mv ../$PKG_NAME.tar.bz2 tmp/
        - mv ../$PKG_NAME_PIO.tar.bz2 tmp/

        # create files containing sha 256 checksum and size in bytes of the tar file
        - sha256sum tmp/$PKG_NAME.tar.bz2 | awk '{print $1}' > tmp/SHA256.txt
        - du -b tmp/$PKG_NAME.tar.bz2 | awk {'print $1}' > tmp/SIZE.txt
        - echo FILENAME $PKG_NAME.tar.bz2
        - echo SHA-256 `cat tmp/SHA256.txt`
        - echo SIZE `cat tmp/SIZE.txt`
        - echo PKG_NAME `cat tmp/pkg_name.txt`

        # same step above but for PIO
        - sha256sum tmp/$PKG_NAME_PIO.tar.bz2 | awk '{print $1}' > tmp/SHA256_pio.txt
        - du -b tmp/$PKG_NAME_PIO.tar.bz2 | awk {'print $1}' > tmp/SIZE_pio.txt
        - echo FILENAME_PIO $PKG_NAME_PIO.tar.bz2
        - echo SHA-256-PIO `cat tmp/SHA256_pio.txt`
        - echo SIZE_PIO `cat tmp/SIZE_pio.txt`
        - echo PKG_NAME_PIO `cat tmp/pkg_name_pio.txt`

    dependencies:
        - start

    artifacts:
        paths:
            - tmp/
    except:
        - branches
        - master

    only:
        - tags

#################################
#######       UPLOAD      #######
#################################

#######    Upload Staging and Release   #######
upload:
    stage: upload

    before_script:
        - eval `python3 check-version-tag.py ${CI_COMMIT_TAG}`

    script:
        - DATE="$(cat tmp/date.txt)"
        - TIME="$(cat tmp/time.txt)"
        - PKG_NAME="$(cat tmp/pkg_name.txt)"
        - PKG_NAME_PIO="$(cat tmp/pkg_name_pio.txt)"
        - TARGET_PATH="$(cat tmp/target_path.txt)"
        - >
          if [[ ${PRE_RELEASE} == "test" ]]; then
            REPO_NAME=${REPO_NAME}-snapshot
            REPO_NAME_PIO=${REPO_NAME_PIO}-snapshot
          fi
        # Upload to Artifactory
        - curl -u $REPO_USR:$REPO_PWD -T tmp/$PKG_NAME.tar.bz2 "${REPO_BASE_URL}/artifactory/${REPO_NAME}/${TARGET_PATH}/${PKG_NAME}.tar.bz2"
        - curl -u $REPO_USR:$REPO_PWD -T tmp/$PKG_NAME_PIO.tar.bz2 "${REPO_BASE_URL}/artifactory/${REPO_NAME_PIO}/${TARGET_PATH}/${PKG_NAME_PIO}.tar.bz2"

    only:
        - tags

    except:
        - master
        - branches


#################################
########      INDEX      ########
#################################
#######    Create Json Index Entry for the Arduino Board Index   #######
index:
    stage: index
    
    before_script:
        - eval `python3 check-version-tag.py ${CI_COMMIT_TAG}`

    script:
    
        - VERSION=${CI_COMMIT_TAG}

        # definisco la URL in base al core ed al tag
        - >
            if [ "$CORE_NAME" = "samd21"]; then
                URL="smartmeio-arancino-platform"
            else
                URL="smartmeio-arancino-platform-$CORE_NAME"
            fi

            if [ "$PRE_RELEASE" != "" ]; then
                URL="$URL-snapshot"
            fi


        #git clone della repo dell'index ()
        - git clone https://$REPO_USR:$REPO_PWD@git.smartme.io/sergio/smartmeio-package-index.git tmp/index
        - cd tmp/index
        - git checkout dev
        - package_template=`cat template_platform_smartmeio_$CORE_NAME.json`


        #creazione file a partire dal template
        - FILENAME=smartmeio-arancino-${VERSION}.tar.bz2
        - SIZE=`cat ../SIZE.txt`
        - SHASUM=`cat ../SHA256.txt`
        - > 
            package_template=`echo $package_template |
            sed s/%%FILENAME%%/${FILENAME}/g |
            sed s/%%SIZE%%/${SIZE}/g |
            sed s/%%SHA256%%/${SHASUM}/g|
            sed s/%%URL%%/${URL}/g |
            sed s/%%VERSION%%/${CI_COMMIT_TAG}/g`

        #- set +x
        #- echo $package_index

        # export del contenuto su file
        - echo $package_template > ../platform_index.json
        
        # merge del file template all'interno dell'index
        - python3 ../../index-update.py

        #push dev
        - git add package_smartmeio_index.json
        - git commit -m "adding $CORE_NAME platform realease $VERSION"
        - git push origin dev
        
        #push master
        - >
            if [ "$PRE_RELEASE" = "" ]; then
                git checkout master
                python3 ../../index-update.py
                git add package_smartmeio_index.json
                git commit -m "adding SAMD platform realease $VERSION"

                git push origin master
            fi
        
    
    only:
        - tags

    except:
        - master
        - branches
    

#################################
#######      CLEANUP      #######
#################################

#######    Cleanup Job    #######
cleanup:
    stage: cleanup

    variables:
        GIT_STRATEGY: none

    script:
        - echo "Cleaning up"
        - rm -rf tmp/

    when: always

    only:
        - tags

    except:
        - master
        - branches
